syntax = "proto3";

package fetch;

option go_package = "proxy-api/fetch";

// Servicio principal de proxy
service ProxyService {
    // Método existente para obtener contenido
    rpc FetchContent(Request) returns (Response);
    
    // Nuevo método para obtener un proxy aleatorio
    rpc GetRandomProxy(ProxyRequest) returns (ProxyResponse);
    
    // Método adicional para obtener estadísticas de proxies
    rpc GetProxyStats(StatsRequest) returns (StatsResponse);
}

// Mensaje de solicitud existente
message Request {
    string url = 1;
    string session = 2;
    bool proxy = 3;
    bool redirect = 4;
}

// Mensaje de respuesta existente
message Response {
    bytes content = 1;
}

// Nuevo mensaje para solicitar un proxy aleatorio
message ProxyRequest {
    string session = 1; // Sesión para la cual obtener el proxy
}

// Nuevo mensaje de respuesta para proxy aleatorio
message ProxyResponse {
    string proxy = 1;   // Dirección del proxy (ip:port)
    bool success = 2;   // Indica si la operación fue exitosa
    string message = 3; // Mensaje descriptivo del resultado
}

// Mensaje para solicitar estadísticas
message StatsRequest {
    // Vacío por ahora, podría expandirse en el futuro
}

// Mensaje de respuesta con estadísticas
message StatsResponse {
    map<string, int32> proxy_count_by_session = 1; // Cantidad de proxies por sesión
    int32 total_valid_proxies = 2;                 // Total de proxies válidos
}